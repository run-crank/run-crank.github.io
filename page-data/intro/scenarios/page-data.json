{"componentChunkName":"component---src-templates-doc-template-js","path":"/intro/scenarios","webpackCompilationHash":"d704f60bdc170b6b92fb","result":{"data":{"pageContent":{"frontmatter":{"section":"intro","path":"/intro/scenarios","title":"Scenarios"},"headings":[{"value":"Getting Started"},{"value":"Basic Structure"},{"value":"Tokens"},{"value":"Non-Scalar Data"},{"value":"Retries"},{"value":"Explicit Waits"},{"value":"Dynamic Tokens"},{"value":"Config Over BDD"},{"value":"VS Code Extension"}],"html":"<p>This page documents how to author Crank Scenario files.</p>\n<hr>\n<h2 id=\"getting-started\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started</h2>\n<p>Although you can author and run Crank Scenario files in any text editor and\ncommand line, for the best experience, we recommend <a href=\"https://code.visualstudio.com/download\">Visual Studio Code</a>\nwith the <a href=\"https://marketplace.visualstudio.com/items?itemName=run-crank.crank-scenario-language\">Crank Scenario Language extension</a> installed.</p>\n<p>Skip to the <a href=\"#vs-code-extension\">VS Code section</a> to see some of the benefits.</p>\n<h3 id=\"installing-cogs\"><a href=\"#installing-cogs\" aria-label=\"installing cogs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing Cogs</h3>\n<p>Before you author your scenario, you'll want to install Cogs corresponding to\nthe systems you are testing. At a minimum, you'll likely want to install the\n<a href=\"https://github.com/run-crank/cog-web\">Web Cog</a> by running:</p>\n<pre><code class=\"language-shell-session\">crank cog:install automatoninc/web\n</code></pre>\n<p><a class=\"btn btn-secondary\" role=\"button\" href=\"/discover-cogs\">Discover More Cogs Here</a></p>\n<p>Once you've installed some Cogs, you can get a list of all available steps on\nyour machine by running the following:</p>\n<pre><code class=\"language-shell-session\">$ crank registry:steps\n</code></pre>\n<p>Run <code>crank registry:steps --help</code> for more information.</p>\n<hr>\n<h2 id=\"basic-structure\"><a href=\"#basic-structure\" aria-label=\"basic structure permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic Structure</h2>\n<p>Scenarios are just yaml files that are named a certain way and conform to a\nspecificiation. All Scenario file names should end with <code>.crank.yml</code> and must\ninclude these three properties:</p>\n<ul>\n<li><strong>scenario</strong>: A string naming the scenario. This is printed out at the top of\ntest runs for your convenience.</li>\n<li><strong>description</strong>: A string documenting the intention behind the scenario. This\nproperty isn't used anywhere currently, but it's sure useful for your future\nself.</li>\n<li><strong>steps</strong>: A list of step objects, each containing, at a minimum, a <strong>step</strong>\nproperty.</li>\n</ul>\n<pre><code class=\"language-yaml\">scenario: Contact Us Form Creates SalesForce Leads\ndescription: >\n  As a website visitor,\n  When I fill out the Contact Us form\n  Then a Lead record should be created for me in Salesforce\n\nsteps:\n- step: Given I navigate to https://www.example.com/contact\n- step: When I fill out input[name=\"EmailAddress\"] with test@e.com\n- step: And I fill out input[name=\"FirstName\"] with Test\n- step: And I submit the form by clicking button[type=\"submit\"]\n- step: Then the FirstName field on Salesforce Lead test@e.com should be Test\n- step: Finally, delete the test@e.com Salesforce Lead\n</code></pre>\n<hr>\n<h2 id=\"tokens\"><a href=\"#tokens\" aria-label=\"tokens permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tokens</h2>\n<p>Crank scenarios can include tokens (prefixed/affixed with <code>{{</code> and <code>}}</code> as a\nway to improve readability, maintainability, and portability of test scenarios.</p>\n<pre><code class=\"language-yaml\">tokens:\n  testEmail: atommy@example.com\n\nsteps:\n- step: The FirstName field on Salesforce Lead {{testEmail}} should be Test\n- step: Delete the {{testEmail}} Salesforce Lead\n</code></pre>\n<p>You can also override tokens at run-time:</p>\n<pre><code class=\"language-shell-session\">$ crank run scenario.yml --token \"testEmail=zjimmy@example.com\"\n</code></pre>\n<hr>\n<h2 id=\"non-scalar-data\"><a href=\"#non-scalar-data\" aria-label=\"non scalar data permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Scalar Data</h2>\n<p>Sometimes, a test scenario requires data that cannot easily or concisely be\nexpressed in a sentence: for example, setting up a fixture for an object in a\nSaaS platform (e.g. a Salesforce Lead).</p>\n<p>In situations like this, you can specify these complex objects on a <strong>data</strong>\nproperty associated with a given step.</p>\n<pre><code class=\"language-yaml\">tokens:\n  test:\n    email: atommy@example.com\n    first: Atoma\n    last: Tommy\n\nsteps:\n- step: Given I create a Salesforce Lead\n  data:\n    lead:\n      Email: '{{test.email}}'\n      FirstName: '{{test.first}}'\n      LastName: '{{test.last}}'\n- step: Then the FirstName field on Salesforce Lead {{test.email}} should be {{test.first}}\n</code></pre>\n<hr>\n<h2 id=\"retries\"><a href=\"#retries\" aria-label=\"retries permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Retries</h2>\n<p>It's common for systems tested by Crank to be integrated in asynchronous ways.\nFor example, object sync time between a CRM like Salesforce and a MAP like\nMarketo may be non-deterministic (but finite), depending on the exact\nconfiguration of each system.</p>\n<p>By default, <code>crank run</code> will execute every step in the <code>steps</code> list in\nsequence, one immediately after another; if a step's outcome is not a pass,\nno retry is attempted.</p>\n<p>In order to account for asynchronous system integrations, you can use the\n<code>failAfter</code> property on a given step. When present, Crank will re-attempt step\nexecution after any non-passing outcome for as many seconds as is configured on\nthis <code>failAfter</code> property.</p>\n<pre><code class=\"language-yaml\">steps:\n- step: Given I create or update a Marketo Lead\n  data:\n    lead:\n      email: test@e.com\n      firstName: Example\n- step: Then the FirstName field on Salesforce Lead test@e.com should be Example\n  failAfter: 90 # Will retry this step for up to 90s if it does not pass\n</code></pre>\n<hr>\n<h2 id=\"explicit-waits\"><a href=\"#explicit-waits\" aria-label=\"explicit waits permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explicit Waits</h2>\n<p>It's also common to configure explicit delays in workflows in the systems that\nCrank is used to test (e.g. waiting a specific amount of time before sending a\ncommunication to a user).</p>\n<p>In these situations, you can use the <code>waitFor</code> property on any step to pause\nstep execution for a certain number of seconds before proceeding.</p>\n<pre><code class=\"language-yaml\">steps:\n- waitFor: 60 # Will wait 60s before executing this step\n  step: Then the FirstName field on Salesforce Lead test@e.com should be Example\n</code></pre>\n<p>Note that it's possible <code>waitFor</code> can be used in combination with <code>failAfter</code>.\nIf both are used, a step will wait until after the <code>waitFor</code> duration elapses,\nthen execute the step; if it does not pass, it will retry the step for up to\nthe <code>failAfter</code> duration, using the initial step execution as the starting time\nfor comparison.</p>\n<hr>\n<h2 id=\"dynamic-tokens\"><a href=\"#dynamic-tokens\" aria-label=\"dynamic tokens permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic Tokens</h2>\n<p>After each step, Cogs may also expose contextual details dynamically as tokens.\nUse these dynamic tokens in Scenarios that rely on details that could only be\nknown at run-time, for instance...</p>\n<p><strong>Test fixtures with run-time interdependencies</strong></p>\n<pre><code class=\"language-yaml\">steps:\n- step: Given I create a Salesforce Account\n  data: {account: {Name: 'Fixture Account'}}\n- step: And I create a Salesforce Contact assigned to the above Account\n  data:\n    contact:\n      Email: 'atommy@example.com'\n      LastName: Tommy\n      # Assign using the dynamic token supplied by the above step.\n      AccountId: '{{salesforce.account.Id}}'\n</code></pre>\n<p><strong>Assertions using run-time data</strong></p>\n<pre><code class=\"language-yaml\">steps:\n- step: When I navigate to https://example.com\n- step: Then Google Analytics should have tracked a pageview for tracking ID UA-98765-43\n- step: When I click the page element button.cta\n- step: Then Google Analytics should have tracked an event with category cta and action click for tracking ID UA-98765-43\n  data:\n    withParameters:\n      # CD10 should match the GA Client ID supplied by the pageview check.\n      cd10: '{{web.googleAnalyticsRequest.cid}}'\n</code></pre>\n<p>Use the <a href=\"#vs-code-extension\">VS Code Extension</a> for intellisense and hints that\nexpose what dynamic tokens are exposed by each step.</p>\n<hr>\n<h2 id=\"config-over-bdd\"><a href=\"#config-over-bdd\" aria-label=\"config over bdd permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config Over BDD</h2>\n<p>Under the hood, Crank does the work to translate your scenario file's step\ntext into something more machine-readable (a series of cogs, stepIds, and data\nobjects).</p>\n<p>If for some reason you want to sacrifice human-readability for performance, you\ncan also define your steps more purely as configuration:</p>\n<pre><code class=\"language-yaml\">steps:\n- cog: automatoninc/web\n  stepId: NavigateToPage\n  data:\n    webPageUrl: https://example.com/contact\n- cog: automatoninc/web\n  stepId: EnterValueIntoField\n  data:\n    domQuerySelector: input[name=\"EmailAddress\"]\n    value: test@example.com\n</code></pre>\n<p>Notice here, each step object, instead of containing a <strong>step</strong> property that\nmatches a known step expression, contains the three aforementioned properties:</p>\n<ul>\n<li><strong>cog</strong>: The name of the Cog that provides the step (e.g. what you used to\n<code>crank cog:install</code> the Cog in the first place).</li>\n<li><strong>stepId</strong>: A unique ID for the step provided by the Cog.</li>\n<li><strong>data</strong>: Similar to the above, a map/dictionary/object encoding all of the\ndata that the step expects.</li>\n</ul>\n<p>You can find the information you need for each step in this format by running\nthe following command:</p>\n<pre><code class=\"language-shell-session\">$ crank registry:steps --columns=\"cog,id,expected fields\"\n</code></pre>\n<hr>\n<h2 id=\"vs-code-extension\"><a href=\"#vs-code-extension\" aria-label=\"vs code extension permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VS Code Extension</h2>\n<p>The <a href=\"https://marketplace.visualstudio.com/items?itemName=run-crank.crank-scenario-language\">Crank Scenario Language extension</a> simplifies the\nScenario authoring process by embuing the editor with knowledge of...</p>\n<ul>\n<li><strong>a)</strong> The scenario format (e.g. available and required yaml keys),</li>\n<li><strong>b)</strong> Deep knowledge of the Cogs installed on the current system.</li>\n</ul>\n<p>This knowledge is used to power IntelliSense features like...</p>\n<h4 id=\"auto-completion-of-steps\"><a href=\"#auto-completion-of-steps\" aria-label=\"auto completion of steps permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auto-completion of steps</h4>\n<p><img src=\"/img/intro/step-intellisense.gif\" alt=\"Step Auto-Complete\" loading=\"lazy\" /><br /></p>\n<h4 id=\"auto-completion-of-step-data-attributes\"><a href=\"#auto-completion-of-step-data-attributes\" aria-label=\"auto completion of step data attributes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auto-completion of step data attributes</h4>\n<p><img src=\"/img/intro/data-intellisense.gif\" alt=\"Data Auto-Complete\" loading=\"lazy\" /><br /></p>\n<h4 id=\"auto-completion-of-dynamic-tokens\"><a href=\"#auto-completion-of-dynamic-tokens\" aria-label=\"auto completion of dynamic tokens permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auto-completion of dynamic tokens</h4>\n<p><img src=\"/img/intro/dynamic-token-intellisense.gif\" alt=\"Dynamic Auto-Complete\" loading=\"lazy\" /><br /></p>\n<h4 id=\"contextual-links-for-running-scenarios\"><a href=\"#contextual-links-for-running-scenarios\" aria-label=\"contextual links for running scenarios permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contextual links for running scenarios</h4>\n<p><img src=\"/img/intro/run-scenario.gif\" alt=\"Run Scenario\" loading=\"lazy\" /><br /></p>"},"navBar":{"edges":[{"node":{"frontmatter":{"path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"path":"/intro/install","title":"Installation"}}},{"node":{"frontmatter":{"path":"/intro/scenarios","title":"Scenarios"}}},{"node":{"frontmatter":{"path":"/intro/community","title":"Community"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"section":"intro"}}}