{"componentChunkName":"component---src-templates-doc-template-js","path":"/intro/scenarios","webpackCompilationHash":"8f48a9c3fc4553e2a0d9","result":{"data":{"pageContent":{"frontmatter":{"section":"intro","path":"/intro/scenarios","title":"Scenarios"},"headings":[{"value":"Finding Steps"},{"value":"Basic Structure"},{"value":"Non-Scalar Data"},{"value":"Config Over BDD"}],"html":"<p>This page documents how to author Crank Scenario files.</p>\n<hr>\n<h2 id=\"finding-steps\"><a href=\"#finding-steps\" aria-label=\"finding steps permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Finding Steps</h2>\n<p>Once you've installed some Cogs, you can get a list of all available steps on\nyour machine by running the following:</p>\n<pre><code class=\"language-shell-session\">$ crank registry:steps\n</code></pre>\n<p>Run <code>crank registry:steps --help</code> for more information.</p>\n<hr>\n<h2 id=\"basic-structure\"><a href=\"#basic-structure\" aria-label=\"basic structure permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic Structure</h2>\n<p>All Scenarios must include these three properties:</p>\n<ul>\n<li><strong>scenario</strong>: A string naming the scenario. This is printed out at the top of\ntest runs for your convenience.</li>\n<li><strong>description</strong>: A string documenting the intention behind the scenario. This\nproperty isn't used anywhere currently, but it's sure useful for your future\nself.</li>\n<li><strong>steps</strong>: A list of step objects, each containing, at a minimum, a <strong>step</strong>\nproperty.</li>\n</ul>\n<pre><code class=\"language-yaml\">scenario: Contact Us Form Creates SalesForce Leads\ndescription: >\n  As a website visitor,\n  When I fill out the Contact Us form\n  Then a Lead record should be created for me in Salesforce\n\nsteps:\n- step: Given I navigate to https://www.example.com/contact\n- step: When I fill out input[name=\"EmailAddress\"] with test@e.com\n- step: And I fill out input[name=\"FirstName\"] with Test\n- step: And I submit the form by clicking button[type=\"submit\"]\n- step: Then the FirstName field on Salesforce Lead test@e.com should be Test\n- step: Finally, delete the test@e.com Salesforce Lead\n</code></pre>\n<hr>\n<h2 id=\"non-scalar-data\"><a href=\"#non-scalar-data\" aria-label=\"non scalar data permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Scalar Data</h2>\n<p>Sometimes, a test scenario requires data that cannot easily or concisely be\nexpressed in a sentence: for example, setting up a fixture for an object in a\nSaaS platform (e.g. a Salesforce Lead).</p>\n<p>In situations like this, you can specify these complex objects on a <strong>data</strong>\nproperty associated with a given step.</p>\n<pre><code class=\"language-yaml\">steps:\n- step: Given I create a Salesforce Lead\n  data:\n    lead:\n      Email: test@e.com\n      FirstName: Atoma\n      LastName: Tommy\n- step: Then the FirstName field on Salesforce Lead test@e.com should be Atoma\n</code></pre>\n<hr>\n<h2 id=\"config-over-bdd\"><a href=\"#config-over-bdd\" aria-label=\"config over bdd permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config Over BDD</h2>\n<p>Under the hood, Crank does the work to translate your scenario file's step\ntext into something more machine-readable (a series of cogs, stepIds, and data\nobjects).</p>\n<p>If for some reason you want to sacrifice human-readability for performance, you\ncan also define your steps more purely as configuration:</p>\n<pre><code class=\"language-yaml\">steps:\n- cog: automatoninc/web\n  stepId: NavigateToPage\n  data:\n    webPageUrl: https://example.com/contact\n- cog: automatoninc/web\n  stepId: EnterValueIntoField\n  data:\n    domQuerySelector: input[name=\"EmailAddress\"]\n    value: test@example.com\n</code></pre>\n<p>Notice here, each step object, instead of containing a <strong>step</strong> property that\nmatches a known step expression, contains the three aforementioned properties:</p>\n<ul>\n<li><strong>cog</strong>: The name of the Cog that provides the step (e.g. what you used to\n<code>crank cog:install</code> the Cog in the first place).</li>\n<li><strong>stepId</strong>: A unique ID for the step provided by the Cog.</li>\n<li><strong>data</strong>: Similar to the above, a map/dictionary/object encoding all of the\ndata that the step expects.</li>\n</ul>\n<p>You can find the information you need for each step in this format by running\nthe following command:</p>\n<pre><code class=\"language-shell-session\">$ crank registry:steps --columns=\"cog,id,expected fields\"\n</code></pre>"},"navBar":{"edges":[{"node":{"frontmatter":{"path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"path":"/intro/install","title":"Installation"}}},{"node":{"frontmatter":{"path":"/intro/scenarios","title":"Scenarios"}}},{"node":{"frontmatter":{"path":"/intro/community","title":"Community"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"section":"intro"}}}