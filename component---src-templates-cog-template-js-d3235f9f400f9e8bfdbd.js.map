{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-yaml.js","webpack:///./src/templates/cog-template.js"],"names":["Prism","anchorOrAlias","tag","properties","source","createValuePattern","value","flags","replace","pattern","RegExp","languages","yaml","lookbehind","alias","greedy","yml","Template","props","state","cog","data","cogs","cogExtras","pageContext","extras","window","location","hash","startsWith","stepFilter","handleStepFilterChange","bind","componentDidMount","document","getElementById","scrollIntoView","behavior","e","highlightAll","render","this","cogx","subTitle","lpLabel","label","metaImage","img","metaDescription","lpDescription","activeTrail","className","id","src","alt","style","maxHeight","useCases","length","map","useCase","i","key","title","description","fontSize","steps","to","href","encodeURIComponent","name","target","authFieldsList","captionSide","scope","field","optionality","getFieldEnvironmentVariable","authHelpUrl","onChange","stepDefinitionsList","step","stepId","filter","s","type","help","getStepExpression","getStepData","expectedFieldsList","getFieldType","expectedRecordsList","r","includes","record","guaranteedFieldsList","j","getRecordToken","mayHaveMoreFields","homepage","icon","GitHub","width","height","fill","event","setState","history","replaceState","keyword","expression","toLowerCase","substr","matchedFields","matchRegex","replaceMap","exec","index","lastIndex","Object","keys","forEach","trim","missingFieldCount","dataString","f","toUpperCase","token","split","React","Component","pageQuery"],"mappings":"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","file":"component---src-templates-cog-template-js-d3235f9f400f9e8bfdbd.js","sourcesContent":["require(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)';\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|]|}|\\s*#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/true|false/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      // \\2 because of the lookbehind group\n      pattern: createValuePattern(/(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2/.source),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(Prism);","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Prism from 'prismjs';\nimport Icon from '../components/icon';\nimport GitHub from '../components/icon/github.icon';\nimport Layout from '../components/layout'\n\nimport 'prismjs/components/prism-yaml';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-shell-session';\nimport '../../node_modules/prismjs/themes/prism-tomorrow.css';\nimport './_doc-template.scss';\n\nexport default class Template extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.state.cog = props.data.cog;\n    this.state.cogs = props.data.cogs;\n    this.state.cogExtras = props.pageContext.extras;\n\n    if (typeof window !== `undefined` && window.location.hash && window.location.hash.startsWith('#step:')) {\n      this.state.stepFilter = window.location.hash.replace('#step:', '');\n    } else {\n      this.state.stepFilter = \"\";\n    }\n\n    this.handleStepFilterChange = this.handleStepFilterChange.bind(this);\n  }\n\n  componentDidMount() {\n    if (typeof window !== `undefined` && window.location.hash && window.location.hash.startsWith('#step:')) {\n      try {\n        const elem = document.getElementById('steps');\n        elem.scrollIntoView({behavior: 'smooth'});\n      } catch (e) {}\n    }\n    Prism.highlightAll();\n  }\n\n  render() {\n    const cog = this.state.cog;\n    const cogx = this.state.cogExtras\n    return (\n      <Layout\n        subTitle={`${cogx.lpLabel || cogx.label} QA Automation`}\n        metaImage={`https://crank.run${cogx.img}`}\n        metaDescription={cogx.lpDescription ? cogx.lpDescription : `${cogx.lpLabel || cogx.label} BDD testing with Crank.`}\n        activeTrail='/discover-cogs'\n        location={this.props.location}\n      ><main>\n        <div className=\"cog-hero jumbotron jumbotron-fluid text-center mb-5\" id=\"top\">\n          <div className=\"container\">\n            <h1 className=\"display-4\">{cogx.lpLabel || cogx.label} QA Automation</h1>\n            <h3 className=\"lead\">Run {cogx.lpLabel || cogx.label} test scenarios using the Crank BDD framework.</h3>\n            <img src={cogx.img} alt={cogx.label + ' Logo'} style={{maxHeight: '75px'}} />\n          </div>\n        </div>\n        {cogx.lpDescription ? (<section className=\"container\">\n          <div className=\"card bg-light mb-5\">\n            <div className=\"card-body\">\n              <p className=\"card-text lead\">{cogx.lpDescription}</p>\n            </div>\n          </div>\n        </section>) : ''}\n        {cogx.useCases.length ? (<section className=\"container mb-5\">\n          <div className=\"row\">\n            {cogx.useCases.map((useCase, i) => (\n              <div className=\"col-12 col-lg-6 mb-4 mb-lg-0\" key={`UseCase__${i}`}>\n                <div className=\"card h-100\">\n                  <div className=\"card-body\">\n                    <h5 className=\"card-title font-weight-bold\">{useCase.title}</h5>\n                    <p className=\"card-text small\">{useCase.description}</p>\n                    <pre className=\"language-yaml\" style={{fontSize: '0.6em'}}>\n                      <code className=\"language-yaml\">\n                        {useCase.steps}\n                      </code>\n                    </pre>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </section>) : ''}\n        {cogx.useCases.length || cogx.lpDescription ? (<section className=\"mb-5 py-5 bg-light\" id=\"what-is-crank\">\n          <div className=\"container\">\n            <h2>What is Crank?</h2>\n            <div>\n              <p className=\"card-text\">Crank is a BDD test automation framework for SaaS-based business technology.</p>\n              <Link to=\"/intro\" className=\"btn btn-secondary mr-0 mr-md-2 mb-2 mb-md-0 d-block d-md-inline-block\">Developer Getting Started</Link>\n              <a href={`https://app.automatoninc.com/signup?utm_medium=referral&utm_source=crank&utm_campaign=${encodeURIComponent(`cogs/${cog.name}`)}`} className=\"btn btn-outline-secondary d-block d-md-inline-block\" target=\"_blank\">Hosted QA Automation for Business Users</a>\n            </div>\n          </div>\n        </section>) : ''}\n        <section className=\"container small mb-5\" id=\"installation\">\n          <h2>Installing{cog.authFieldsList.length ? ' and Authenticating' : ''} this Cog</h2>\n          <p>\n            Once you've successfully <Link to=\"/intro/install\">installed Crank</Link> you\n            can install this Cog by running the following:\n          </p>\n          <pre className=\"language-shell-session mb-3\" style={{fontSize: '0.8em'}}>\n            <code className=\"language-shell-session\">\n              $ crank cog:install {cog.name}\n            </code>\n          </pre>\n          {cog.authFieldsList.length ? (\n            <div className=\"table-responsive\">\n              <p>\n                You will be asked for the following authentication details on installation.\n                To avoid prompts in a CI/CD context, you can provide the same details as environment\n                variables.\n              </p>\n              <table className=\"table table-striped small\">\n                <caption className=\"h5\" style={{captionSide: 'top'}}>Expected Authentication Details</caption>\n                <thead>\n                  <tr className=\"d-flex\">\n                    <th scope=\"col\" className=\"col-md-2\">Field</th>\n                    <th scope=\"col\" className=\"col-md-5\">Install-Time Environment Variable</th>\n                    <th scope=\"col\" className=\"col-md-5\">Description</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {cog.authFieldsList.map((field, i) => (\n                    <tr className=\"d-flex\" key={`AuthField__${field.key}`}>\n                      <th className=\"col-md-2\" scope=\"row\"><code>{field.key} {field.optionality === 1 ? (<sup title=\"Required Input\" className=\"text-danger\">*</sup>) : ''}</code></th>\n                      <td className=\"col-md-5\"><code>{this.getFieldEnvironmentVariable(field)}</code></td>\n                      <td className=\"col-md-5\">{field.description}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              <p>You can always re-authenticate by running the following command.</p>\n              <pre className=\"language-shell-session mb-3\" style={{fontSize: '0.8em'}}>\n                <code className=\"language-shell-session\">\n                  $ crank cog:auth {cog.name}\n                </code>\n              </pre>\n              {cog.authHelpUrl ? (\n                <a href={cog.authHelpUrl} target=\"_blank\" className=\"btn btn-secondary\">Further Auth Details Here</a>\n              ) : ''}\n              <hr className=\"my-5\" />\n            </div>\n          ) : (<p>That's it!  No further installation steps.</p>)}\n        </section>\n        <section className=\"bg-light py-3 mb-3 sticky-top\">\n          <div className=\"container\">\n            <div className=\"row px-3\">\n              <h2 className=\"col-12 col-md-8 pl-0 mb-0 h3\">{cogx.lpLabel || cogx.label} Test Steps</h2>\n              <select value={this.state.stepFilter} className=\"col-12 col-md-4 form-control small mt-2 mt-md-0\" onChange={this.handleStepFilterChange}>\n                <option value=\"\">Show All Steps</option>\n                {cog.stepDefinitionsList.map((step, i) => (\n                  <option value={step.stepId} key={`StepOption__${step.stepId}`}>{step.name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </section>\n        <a id=\"steps\" className=\"invisible\"></a>\n        <section className=\"container small mb-5 mt-5\">\n          {cog.stepDefinitionsList.filter(s => this.state.stepFilter === s.stepId || this.state.stepFilter === '').map((step, i) => (\n            <div className=\"my-4\" id={step.stepId} key={`Step__${step.stepId}`}>\n              <h3 className=\"h4\">{step.name} <sup className={`badge badge-pill badge-${step.type === 0 ? 'success' : 'warning'}`} style={{fontSize: '0.5em'}}>{step.type === 0 ? 'Action' : 'Assertion'}</sup></h3>\n              {step.help ? (<p>{step.help}</p>) : ''}\n              <p>Use this step in a Scenario file like this:</p>\n              <pre className=\"language-yaml\" style={{fontSize: '0.8em'}}>\n                <code className=\"language-yaml\">\n                  - step: {this.getStepExpression(step)}{this.getStepData(step)}\n                </code>\n              </pre>\n              <div className=\"table-responsive small\">\n                <table className=\"table table-striped\">\n                  <caption className=\"h5\" style={{captionSide: 'top'}}>Expected Step Input</caption>\n                  <thead>\n                    <tr className=\"d-flex\">\n                      <th scope=\"col\" className=\"col-md-3\">ID</th>\n                      <th scope=\"col\" className=\"col-md-2\">Type</th>\n                      <th scope=\"col\" className=\"col-md-7\">Description</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {step.expectedFieldsList.map((field, i) => (\n                      <tr className=\"d-flex\" key={`StepField__${step.stepId}__${field.key}`}>\n                        <th className=\"col-md-3\" scope=\"row\"><code>{field.key} {field.optionality === 1 ? (<sup title=\"Required Input\" className=\"text-danger\">*</sup>) : ''}</code></th>\n                        <td className=\"col-md-2\">{this.getFieldType(field)}</td>\n                        <td className=\"col-md-7\">{field.description}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n              {step.expectedRecordsList.filter(r => [0, 1].includes(r.type)).length ? (<div className=\"table-responsive small\">\n                <table className=\"table table-striped\">\n                  <caption className=\"h5\" style={{captionSide: 'top'}}>Exposed Dynamic Tokens</caption>\n                  <thead>\n                    <tr className=\"d-flex\">\n                      <th scope=\"col\" className=\"col-md-4\">Token</th>\n                      <th scope=\"col\" className=\"col-md-2\">Type</th>\n                      <th scope=\"col\" className=\"col-md-6\">Description</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {step.expectedRecordsList.filter(r => [0, 1].includes(r.type)).map((record, i) => record.guaranteedFieldsList.map((field, j) => (\n                      <tr className=\"d-flex\" key={`RecordField__${record.id}__${field.key}`}>\n                        <th className=\"col-md-4\" scope=\"row\"><code>{this.getRecordToken(record, field)}</code></th>\n                        <td className=\"col-md-2\">{this.getFieldType(field)}</td>\n                        <td className=\"col-md-6\">{field.description} {field.help ? (<span className=\"d-block mt-2\">{field.help}</span>) : ''}</td>\n                      </tr>\n                    )))}\n                    {step.expectedRecordsList.filter(r => r.mayHaveMoreFields).map((record, i) => (\n                      <tr className=\"d-flex\" key={`RecordField__${record.id}__Asterisk`}>\n                        <th className=\"col-md-4\" scope=\"row\"><code>{this.getRecordToken(record, '*')}</code></th>\n                        <td className=\"col-md-2\">*</td>\n                        <td className=\"col-md-6\">This step may expose additional dynamic tokens representing values on the {record.id}, depending on how you've configured the underlying system.</td>\n                      </tr>\n                      ))}\n                  </tbody>\n                </table>\n              </div>) : ''}\n              <hr className=\"my-5\" />\n            </div>\n          ))}\n        </section>\n        {cogx.homepage ? (<section className=\"mb-5 py-5 bg-light\" id=\"get-involved\">\n          <div className=\"container\">\n            <h2>Missing a Step You Need?</h2>\n            <div>\n              <p className=\"card-text\">This Cog is open source! Your contributions are welcome and encouraged.</p>\n              <a href={cogx.homepage} target=\"_blank\" className=\"btn btn-secondary mr-0 mr-sm-2 mb-2 mb-sm-0 d-block d-sm-inline-block\"><Icon className=\"mr-1 align-text-top\" icon={GitHub} width={18} height={18} fill=\"#fff\" />Contribute on GitHub</a>\n              <a href=\"https://spectrum.chat/crank\" target=\"_blank\" className=\"btn btn-outline-secondary d-block d-sm-inline-block\">Join the Crank Spectrum Community</a>\n            </div>\n          </div>\n        </section>) : ''}\n      </main></Layout>\n    )\n  }\n\n  handleStepFilterChange(event) {\n    this.setState({stepFilter: event.target.value}, () => {\n      Prism.highlightAll();\n    });\n    history.replaceState(null, null, event.target.value.length ? `#step:${event.target.value}` : '#');\n  }\n\n  getStepExpression(step) {\n    let keyword = step.type === 0 ? 'When I' : 'Then';\n    if (step.expression.includes('delete') || step.stepId.toLowerCase().includes('delete')) {\n      keyword = 'Finally,';\n    }\n\n    let expression = step.expression;\n\n    // Remove the trailing/preceding slashes (from the regex).\n    expression = expression.substr(1, expression.length - 2);\n\n    // Remove any non-capture-group question marks in the expression.\n    expression = expression.replace(/([^\\(])\\?/gi, '$1');\n    var matchRegex = /\\(\\?<([a-zA-Z_-]+)>[^\\)]+\\)/gmi;\n    var replaceMap = {};\n    var matchedFields;\n\n    // Build a map of strings to replace and the values to replace them with.\n    while ((matchedFields = matchRegex.exec(expression)) !== null) {\n      // This is necessary to avoid infinite loops with zero-width matches\n      if (matchedFields.index === matchRegex.lastIndex) {\n        matchRegex.lastIndex++;\n      }\n\n      replaceMap[matchedFields[0]] = `{{${matchedFields[1]}}}`;\n    }\n\n    // Iterate through replacements, modifying the expression each time.\n    Object.keys(replaceMap).forEach((replace) => {\n      expression = expression.replace(replace, replaceMap[replace]);\n    });\n\n    // Remove any remaining capture groups (they are optional)\n    expression = expression.replace(/\\(\\?\\:.*?\\) /gi, ' ');\n\n    return `${keyword} ${expression}`.trim()\n  }\n\n  getStepData(step) {\n    const expression = this.getStepExpression(step);\n    let missingFieldCount = 0;\n    let dataString = \"\\n  data:\\n\";\n\n    // If there are required fields that are not contained within the expression\n    step.expectedFieldsList.forEach(f => {\n      if (f.optionality === 1 && !expression.includes(`{{${f.key}}}`)) {\n        missingFieldCount++;\n\n        switch (f.type) {\n          case 1: // String\n            dataString += `    ${f.key}: string value\\n`;\n            break;\n          case 2: // Boolean\n            dataString += `    ${f.key}: true\\n`;\n            break;\n          case 3: // Numeric\n            dataString += `    ${f.key}: 123\\n`;\n            break;\n          case 4: // Date\n          case 5: // Datetime\n            dataString += `    ${f.key}: 2020-01-01\\n`;\n            break;\n          case 6: // Email\n            dataString += `    ${f.key}: ab@example.com\\n`;\n            break;\n          case 7: // Phone\n            dataString += `    ${f.key}: 555-555-5555\\n`;\n            break;\n          case 10: // URL\n            dataString += `    ${f.key}: https://example.com\\n`;\n            break;\n          case 8: // Any non-scalar\n          case 9: // Map\n            dataString += `    ${f.key}:\\n      field: value\\n`;\n            break;\n          default:\n            dataString += `    ${f.key}: value\\n`;\n        }\n      }\n    })\n\n    if (missingFieldCount === 0) {\n      return '';\n    }\n\n    return dataString;\n  }\n\n  getFieldType(step) {\n    switch (step.type) {\n      case 0:\n        return 'Any Scalar';\n      case 1:\n        return 'String';\n      case 2:\n        return 'Boolean';\n      case 3:\n        return 'Number';\n      case 4:\n        return 'ISO 8601 Date';\n      case 5:\n        return 'ISO 8601 Datetime';\n      case 6:\n        return 'Email Address';\n      case 7:\n        return 'Phone Number';\n      case 8:\n        return 'Any Non-Scalar';\n      case 9:\n        return 'Map/Object';\n      case 10:\n        return 'URL';\n    }\n  }\n\n  getFieldEnvironmentVariable(field) {\n    return `crank_${this.state.cog.name}__${field.key}`.replace(/[^a-zA-Z0-9_]+/g, '_').toUpperCase();\n  }\n\n  getRecordToken(record, field = null) {\n    const cogPart = this.state.cog.name.split('/')[1];\n    let token = `${cogPart}.${record.id}`;\n\n    // If this is a Table record, append a row token part.\n    if (record.type === 1) {\n      token += '.0';\n    }\n\n    if (field) {\n      if (field === '*') {\n        token += `.*`;\n      } else {\n        token += `.${field.key}`;\n      }\n    }\n\n    return `{{${token}}}`;\n  }\n}\n\nexport const pageQuery = graphql`\n  query($name: String!) {\n    cog: cogRegistryJson(name: {eq: $name}) {\n      label\n      homepage\n      authFieldsList {\n        description\n        help\n        key\n        optionality\n        type\n      }\n      authHelpUrl\n      version\n      name\n      stepDefinitionsList {\n        help\n        name\n        stepId\n        type\n        expression\n        expectedFieldsList {\n          description\n          help\n          key\n          optionality\n          type\n        }\n        expectedRecordsList {\n          id\n          type\n          mayHaveMoreFields\n          guaranteedFieldsList {\n            description\n            help\n            key\n            optionality\n            type\n          }\n        }\n      }\n    }\n    cogs: allCogRegistryJson(\n      sort: {fields: label, order: ASC},\n      limit: 1000\n    ) {\n      edges {\n        node {\n          label\n          name\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}